swagger: '2.0'
schemes:
  - wss
host: api
info:
  title: Consumer Messaging API
  version: "1.0.0"
  x-logo:
    url: 'img/liveperson-inc-logo.jpg'
  description: |
    # Introduction
    
    In this document document you will find the reference to the api methods.
    In order to invoke those methods you will first have to:
        
        * Establish a websocket connection to the messaging service.
        * Send authentication token, either by attaching it to the websocket connection request header,
        or sending InitConnection request after the connection has been established.
    
    Please refer to the [Getting Started](https://developers.liveperson.com/consumer-int-getting-started.html) section to see how to do that.
        
    ## Requests
    
    Inovking the api methods is done by sending json messages on the open websocket connection. The messages should be in
    the following format:
        
    ```json
    {
        "type" : "cm.AgentRequestConversation",
        "id" : "hsjshka8162s",
        "body" : { "ttrDefName" : "NORMAL" }
    }
    ```
    
    In the following reference, you will find the ``type``, and the ``body`` of each supported request.
    The ``id`` should be unique string. It will be attached to the service response for correlation purposes.
    
    ## Responses

    Each request will responded by the service with a response message in the following format:
        
    ```json
    {
            "kind" : "resp",
            "reqId" : "hsjshka8162s",
            "type" : "cm.MyRequestResponse",
            "code" : 200,
            "body" : { "conversationId" : "hdjsdhksh2" }
    }
    ```
    
    The possible ``code`` and the ``body`` are documented on each request.
    
    ## Notifications
    
    Some of the requests creates subscription in the server. Following that the server will send notifications
    treggered by specific events. The notification messages will be structured in the following format:
        
    ```json
    {
            "kind" : "notification",
            "type" : "ms.MessagingEventNotification",
            "body" : { "conversationId" : "hdjsdhksh2" }
    }
    ```
    
    The specific ``type`` and ``body`` structure for each notfication, will be documented as reponse code ``100``
    for the subscription request.
    
#externalDocs:
#  description: Find out how to create GitHub repo for your OpenAPI spec.
#  url: 'https://github.com/Rebilly/generator-openapi-repo'
tags:
  - name: infra
    description: Infra
  - name: Messaging
    description: Messaging
  - name: Conversation
    description: Conversation
x-tagGroups:
  - name: General
    tags:
      - infra
  - name: Data
    tags:
      - Messaging
      - Conversation
#securityDefinitions:
#  consumer_msg_auth:
#    description: |
#      TBD.
#    type: oauth2
#    authorizationUrl: 'http://tbd/auth'
#    flow: implicit
#    scopes:
#      'write:scopeA': modify scope
#      'read:scopeA': read scope
#  api_key:
#    description: |
#      For this sample, you can use the api key `special-key` to test the authorization filters.
#    type: apiKey
#    name: api_key
#    in: header
#
paths:
  /GetClock:
    get:
      tags:
        - infra
      summary: Get Clock
      description: |
        Returns the service clock.
      responses:
        200:
          description: Success
          schema:
            type: string
  /KeepAlive:
    get:
      tags:
        - infra
      summary: Keep Alive
      description: |
        Do nothing but keeping the connection open.
      responses:
        200:
          description: Success
          schema:
            type: string
  /InitConnection:
    post:
      tags:
        - infra
      summary: Init Connection (Browsers)
      description: |
        This request is needed only for clients that cannot send websocket headers. It can include the authentication and the clientProperties information.
      parameters:
        - name: headers
          in: body
          required: true
          schema:
            type: array
            items:
                $ref: ../infra/header.json
      responses:
        200:
          description: Success
          schema:
            $ref: ../infra/stringRespBody.json

  /ms.PublishEvent:
    post:
      tags:
        - Messaging
      summary: Publish Event
      description: |
        Publishes Events to an existing dialog.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: ../ms/PublishEvent.json
      responses:
        200:
          description: Success
          schema:
            type: string
  /ms.SubscribeMessagingEvents:
    post:
      tags:
        - Messaging
      summary: Subscribe Messaging Events
      description: |
        Subscribes to get the events of a conversation. 
        Existing events will be sent immediately, while new events will be notified as they happen.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: ../ms/subscribeMessagingEvents.json
      responses:
        100:
          description: ms.messagingEventNotification
          schema:
            $ref: ../ms/messagingEventNotification.json
        200:
          description: Success
          schema:
            type: object

  /cm.ConsumerRequestConversation:
    post:
      tags:
        - Conversation
      summary: Consumer Request Conversation
      description: |
        This request is used by the consumer to create a new conversation with the brand.
      parameters:
      responses:
        200:
          description: Success - cm.RequestConversationResponse
          schema:
            $ref: ../cm/consumerRequestConversationResp.json
        400:
          description: Bad Request
          schema:
            $ref: ../infra/stringRespBody.json

  /cqm.SubscribeExConversations:
    post:
      tags:
        - Conversation
      summary: Subscribe Conversations Metadata
      description: |
        Subscribes to any changes in the medata of the conversations of this user.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: ../aam/subscribeExConversations.json
      responses:
        100:
          description: cqm.ExConversationChangeNotification
          schema:
            $ref: ../aam/subscribeExConversationsNotification.json
        200:
          description: Success
          schema:
            $ref: ../aam/subscribeExConversationsResp.json
  /cqm.UnsubscribeExConversations:
    delete:
      tags:
        - Conversation
      summary: Unsubscribe Conversations Metadata
      description: |
        TBD
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: ../aam/unsubscribeExConversations.json
      responses:
        200:
          description: Success
          schema:
            type: string
  /cm.UpdateConversationField:
    patch:
      tags:
        - Conversation
      summary: Update Conversation Field
      description: |
        Update Conversation Field
      parameters:
        - name: body
          in: body
          description: TBD
          required: true
          schema:
            $ref: ../cm/updateConversationFieldBody.json
      responses:
        200:
          description: Success
          schema:
            $ref: ../infra/stringRespBody.json
  